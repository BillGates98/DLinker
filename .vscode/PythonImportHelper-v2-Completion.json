[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "isExtraImport": true,
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "isExtraImport": true,
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "isExtraImport": true,
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "isExtraImport": true,
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "get_format",
        "importPath": "get_format",
        "description": "get_format",
        "isExtraImport": true,
        "detail": "get_format",
        "documentation": {}
    },
    {
        "label": "get_format",
        "importPath": "get_format",
        "description": "get_format",
        "isExtraImport": true,
        "detail": "get_format",
        "documentation": {}
    },
    {
        "label": "get_format",
        "importPath": "get_format",
        "description": "get_format",
        "isExtraImport": true,
        "detail": "get_format",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "RDF",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "RDF",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "RDF",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "RDF",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "OWL",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "OWL",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "ParseException",
        "importPath": "pyparsing",
        "description": "pyparsing",
        "isExtraImport": true,
        "detail": "pyparsing",
        "documentation": {}
    },
    {
        "label": "ParseException",
        "importPath": "pyparsing",
        "description": "pyparsing",
        "isExtraImport": true,
        "detail": "pyparsing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "log",
        "description": "log",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "dump",
        "importPath": "dump",
        "description": "dump",
        "isExtraImport": true,
        "detail": "dump",
        "documentation": {}
    },
    {
        "label": "dump",
        "importPath": "dump",
        "description": "dump",
        "isExtraImport": true,
        "detail": "dump",
        "documentation": {}
    },
    {
        "label": "dump",
        "importPath": "dump",
        "description": "dump",
        "isExtraImport": true,
        "detail": "dump",
        "documentation": {}
    },
    {
        "label": "dump",
        "importPath": "dump",
        "description": "dump",
        "isExtraImport": true,
        "detail": "dump",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "validators",
        "description": "validators",
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "tz",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "boolean",
        "importPath": "xmlrpc.client",
        "description": "xmlrpc.client",
        "isExtraImport": true,
        "detail": "xmlrpc.client",
        "documentation": {}
    },
    {
        "label": "CheckSimilarity",
        "importPath": "check_similarity",
        "description": "check_similarity",
        "isExtraImport": true,
        "detail": "check_similarity",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "StringUtils",
        "importPath": "string_utils",
        "description": "string_utils",
        "isExtraImport": true,
        "detail": "string_utils",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "xlwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlwt",
        "description": "xlwt",
        "detail": "xlwt",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "HandlePredicates",
        "importPath": "handle_predicates",
        "description": "handle_predicates",
        "isExtraImport": true,
        "detail": "handle_predicates",
        "documentation": {}
    },
    {
        "label": "ComputeSimilarPredicate",
        "importPath": "compute_similars_pairs_predicates",
        "description": "compute_similars_pairs_predicates",
        "isExtraImport": true,
        "detail": "compute_similars_pairs_predicates",
        "documentation": {}
    },
    {
        "label": "rocker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rocker",
        "description": "rocker",
        "detail": "rocker",
        "documentation": {}
    },
    {
        "label": "chunk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chunk",
        "description": "chunk",
        "detail": "chunk",
        "documentation": {}
    },
    {
        "label": "Reformulation",
        "importPath": "reformulation",
        "description": "reformulation",
        "isExtraImport": true,
        "detail": "reformulation",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Node2Vec",
        "importPath": "graph2vec",
        "description": "graph2vec",
        "isExtraImport": true,
        "detail": "graph2vec",
        "documentation": {}
    },
    {
        "label": "rdflib_to_networkx_multidigraph",
        "importPath": "rdflib.extras.external_graph_libs",
        "description": "rdflib.extras.external_graph_libs",
        "isExtraImport": true,
        "detail": "rdflib.extras.external_graph_libs",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Node2Vec",
        "importPath": "node2vec",
        "description": "node2vec",
        "isExtraImport": true,
        "detail": "node2vec",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "CandidateEntityPairs",
        "kind": 6,
        "importPath": "candidate_entities_pairs",
        "description": "candidate_entities_pairs",
        "peekOfCode": "class CandidateEntityPairs:\n    def __init__(self, input_source='',  input_target='', output_path='', similar_predicates_path='', alpha=0, phi=0, level=1):\n        log.info(\"Candidates Entities Pairs started \")\n        self.predicates_pairs = self.read_similar_predicates(file_name=similar_predicates_path)\n        self.input_source = input_source\n        self.input_target = input_target\n        self.output_path = output_path\n        self.input_files = []\n        self.limit = 10\n        self.start_time = time.time()",
        "detail": "candidate_entities_pairs",
        "documentation": {}
    },
    {
        "label": "divide_chunks",
        "kind": 2,
        "importPath": "candidate_entities_pairs",
        "description": "candidate_entities_pairs",
        "peekOfCode": "def divide_chunks(l, n):\n    outputs = [] \n    data = list(l)\n    for i in range(0, len(data), n):\n        outputs.append(data[i:i + n])\n    return outputs\nclass CandidateEntityPairs:\n    def __init__(self, input_source='',  input_target='', output_path='', similar_predicates_path='', alpha=0, phi=0, level=1):\n        log.info(\"Candidates Entities Pairs started \")\n        self.predicates_pairs = self.read_similar_predicates(file_name=similar_predicates_path)",
        "detail": "candidate_entities_pairs",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PYTHONIOENCODING\"]",
        "kind": 5,
        "importPath": "candidate_entities_pairs",
        "description": "candidate_entities_pairs",
        "peekOfCode": "os.environ[\"PYTHONIOENCODING\"] = \"utf-8\"\nscriptLocale=locale.setlocale(category=locale.LC_ALL, locale=\"en_GB.UTF-8\")\ndef divide_chunks(l, n):\n    outputs = [] \n    data = list(l)\n    for i in range(0, len(data), n):\n        outputs.append(data[i:i + n])\n    return outputs\nclass CandidateEntityPairs:\n    def __init__(self, input_source='',  input_target='', output_path='', similar_predicates_path='', alpha=0, phi=0, level=1):",
        "detail": "candidate_entities_pairs",
        "documentation": {}
    },
    {
        "label": "CheckSimilarity",
        "kind": 6,
        "importPath": "check_similarity",
        "description": "check_similarity",
        "peekOfCode": "class CheckSimilarity: \n    \"\"\" [Check Similarity Measure]\n        To confirm the similarity measure we must ensure that,\n        2 predicates with high similarity  measure must have at least one common object\n    \"\"\"\n    def __init__(self, graphs=None):\n        super().__init__()\n        self.graphs = graphs\n    def get_same_objects_from_different_predicate(self, g=None, f_predicate='', s_predicate=''):\n        query = \"\"\"SELECT DISTINCT ?fobject",
        "detail": "check_similarity",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "kind": 6,
        "importPath": "compute_files",
        "description": "compute_files",
        "peekOfCode": "class ComputeFile: \n    def __init__(self, input_path='', output_path=''):\n        self.input_path = input_path\n        self.output_path = output_path\n        self.input_files = []\n        self.output_files = []\n        self.extensions = ['.ttl', '.nt', '.rdf', '.owl']\n    def build_graph(self, input_file=''):\n        graph = Graph()\n        graph.parse(input_file, format=get_format(value=input_file))",
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeSimilarPredicate",
        "kind": 6,
        "importPath": "compute_similars_pairs_predicates",
        "description": "compute_similars_pairs_predicates",
        "peekOfCode": "class ComputeSimilarPredicate:\n    def __init__(self, predicates=[], graphs=None, alpha_predicate=1, output_path=''):\n        self.predicates = predicates\n        self.path_to_file = './outputs/outputs.json'\n        self.graphs = graphs\n        self.associated_predicates = {}\n        self.alpha_predicate = alpha_predicate\n        self.output_path = output_path\n        log.info('Compute similars predicates')\n    def get_initial_predicate_with_uri(self, value=''):",
        "detail": "compute_similars_pairs_predicates",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "compute_similars_pairs_predicates",
        "description": "compute_similars_pairs_predicates",
        "peekOfCode": "nlp = spacy.load('en_core_web_md')\nclass ComputeSimilarPredicate:\n    def __init__(self, predicates=[], graphs=None, alpha_predicate=1, output_path=''):\n        self.predicates = predicates\n        self.path_to_file = './outputs/outputs.json'\n        self.graphs = graphs\n        self.associated_predicates = {}\n        self.alpha_predicate = alpha_predicate\n        self.output_path = output_path\n        log.info('Compute similars predicates')",
        "detail": "compute_similars_pairs_predicates",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    def __init__(self, file_path='./config/config.json'):\n        super().__init__()\n        self.file_path = file_path\n        self.data = None\n    def load(self, key=''):\n        f = open(self.file_path,)\n        self.data = json.load(f)\n        f.close()\n        if key:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "kind": 6,
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "peekOfCode": "class DeepSimilarity:\n    def __init__(self, code=''):\n        # print('Deep String Similarity')\n        self.code = code\n    def containsNumber(self, value):\n        for character in value:\n            if character.isdigit():\n                return True\n        return False\n    def ngram_similarity(self, value1='', value2='', N=3):",
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 6,
        "importPath": "dump",
        "description": "dump",
        "peekOfCode": "class dump:\n    def __init__(self):\n        self.workbook = xlwt.Workbook()\n        # print('Writing to file will start')\n    def write_to_csv(self, file_name = '', entries=[] ):\n        with open('./profiling_output/'+ file_name +'.csv', 'w', newline='') as file:\n            writer = csv.writer(file)\n            for data in entries : \n                writer.writerow(data)\n    def write_to_txt(self, file_path='', values=[]):",
        "detail": "dump",
        "documentation": {}
    },
    {
        "label": "HandlePredicates",
        "kind": 6,
        "importPath": "handle_predicates",
        "description": "handle_predicates",
        "peekOfCode": "class HandlePredicates: \n    def __init__(self, input_files=[], graphs=[]):\n        super().__init__()\n        self.input_files = input_files\n        self.grapĥs = graphs\n        self.dataset_predicates = []\n    def get_suffix(self, value='', prefixes=[]):\n        for prefix in prefixes:\n            if prefix in value :\n                return value.replace(prefix, '')",
        "detail": "handle_predicates",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def debug(message):\n    logging.debug(message)\ndef info(message):\n    logging.info(message)\ndef error(message):\n    logging.error(message)\ndef warning(message):\n    logging.warning(message)\ndef exception(message):\n    logging.exception(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def info(message):\n    logging.info(message)\ndef error(message):\n    logging.error(message)\ndef warning(message):\n    logging.warning(message)\ndef exception(message):\n    logging.exception(message)\ndef critical(message):\n    logging.critical(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def error(message):\n    logging.error(message)\ndef warning(message):\n    logging.warning(message)\ndef exception(message):\n    logging.exception(message)\ndef critical(message):\n    logging.critical(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def warning(message):\n    logging.warning(message)\ndef exception(message):\n    logging.exception(message)\ndef critical(message):\n    logging.critical(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "exception",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def exception(message):\n    logging.exception(message)\ndef critical(message):\n    logging.critical(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "critical",
        "kind": 2,
        "importPath": "log",
        "description": "log",
        "peekOfCode": "def critical(message):\n    logging.critical(message)",
        "detail": "log",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Main: \n    def __init__(self, input_path='', output_path='', alpha_predicate=0):\n        self.input_path = input_path\n        self.output_path = output_path\n        self.input_files = []\n        self.start_time = time.time()\n        self.alpha_predicate = alpha_predicate\n        log.info('###   Predicates similarities started    ###')\n    def run(self):\n        inputs, _, graphs = ComputeFile(input_path=self.input_path, output_path=self.output_path).build_list_files()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RDFKeyDiscovery",
        "kind": 6,
        "importPath": "rocker",
        "description": "rocker",
        "peekOfCode": "class RDFKeyDiscovery:\n    def __init__(self, rdf_file='', output_path=''):\n        self.rdf_file = rdf_file\n        self.graph = None\n        self.output_path = output_path\n        self.candidate_keys = []\n    def load_rdf_data(self):\n        with open(self.rdf_file, 'r', encoding='utf-8') as file:\n            rdf_data = file.read()\n        self.graph = rocker.RDFGraph(data=rdf_data)",
        "detail": "rocker",
        "documentation": {}
    },
    {
        "label": "ScoreComputation",
        "kind": 6,
        "importPath": "score_computation",
        "description": "score_computation",
        "peekOfCode": "class ScoreComputation:\n    def __init__(self, input_good_validation='', input_bad_validation='', input_same_as_file='', chunk_size=1000):\n        self.input_good_validation = input_good_validation\n        self.input_bad_validation = input_bad_validation\n        self.input_same_as_file = input_same_as_file\n        self.chunk_size = chunk_size\n        self.recaps = {\n            '00': 0,\n            '01': 0,\n            '10': 0,",
        "detail": "score_computation",
        "documentation": {}
    },
    {
        "label": "StringUtils",
        "kind": 6,
        "importPath": "string_utils",
        "description": "string_utils",
        "peekOfCode": "class StringUtils:\n    def __init__(self):\n        pass\n    def clean_value(self, value=''):\n        \"\"\"[returns a syntactically and easily comparable sentence]\n        Args:\n            value (str): [string with special characters].\n        Returns:\n            [type]: [string without special characters]\n        \"\"\"",
        "detail": "string_utils",
        "documentation": {}
    },
    {
        "label": "extract_entity_vectors",
        "kind": 2,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "def extract_entity_vectors(rdf_file, vector_dim=100, walk_length=30, num_walks=10):\n    rdf_graph = Graph()\n    rdf_graph.parse(rdf_file, format=\"turtle\")\n    rdf2vec_model = Node2Vec(\n        dimensions=vector_dim,\n        walk_length=walk_length,\n        num_walks=num_walks,\n        workers=4\n    )\n    rdf2vec_model.fit(rdf_graph)",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "calculate_alignment_metrics",
        "kind": 2,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "def calculate_alignment_metrics(output_file, truth_file):\n    output_graph = Graph()\n    output_graph.parse(output_file, format=\"turtle\")\n    truth_graph = Graph()\n    truth_graph.parse(truth_file, format=\"turtle\")\n    found_alignments = set(output_graph.subjects())\n    true_alignments = set(truth_graph.subjects())\n    intersection = len(found_alignments.intersection(true_alignments))\n    precision = intersection / len(found_alignments) if len(found_alignments) > 0 else 0.0\n    recall = intersection / len(true_alignments) if len(true_alignments) > 0 else 0.0",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "create_and_save_rdf_from_dict",
        "kind": 2,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "def create_and_save_rdf_from_dict(input_dict, output_file):\n    graph = Graph()\n    # owl = Namespace(\"http://www.w3.org/2002/07/owl#\")\n    for source, target in input_dict.items():\n        source_uri = URIRef(source)\n        target_uri = URIRef(target)\n        graph.add((source_uri, OWL.sameAs, target_uri))\n    graph.serialize(destination=output_file, format=\"turtle\")\ndef random_choice(value='', data=[], n = 1000):\n    ds = DeepSimilarity(code='*')",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "random_choice",
        "kind": 2,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "def random_choice(value='', data=[], n = 1000):\n    ds = DeepSimilarity(code='*')\n    score = 0.0\n    _object = ''\n    _data = random.choices(data, k=n)\n    for i in range(len(_data)):\n        _score = ds.hamming(value1=value, value2=data[i])\n        score = _score if _score >= score else score\n        _object = data[i] if _score >= score else _object\n    return score, _object",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "process_rdf_files",
        "kind": 2,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "def process_rdf_files(file1, file2):\n    graph1 = Graph()\n    graph1.parse(file1)\n    vectors1 = extract_entity_vectors(rdf_file=file1)\n    graph2 = Graph()\n    graph2.parse(file2)  \n    vectors2 = extract_entity_vectors(rdf_file=file2)\n    os1 = {}\n    op1 = {}\n    os2 = {}",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "output_file = './outputs/doremus/tmp_same_as.ttl'\ntruth_file = './validations/doremus/valid_same_as.ttl'\ndef extract_entity_vectors(rdf_file, vector_dim=100, walk_length=30, num_walks=10):\n    rdf_graph = Graph()\n    rdf_graph.parse(rdf_file, format=\"turtle\")\n    rdf2vec_model = Node2Vec(\n        dimensions=vector_dim,\n        walk_length=walk_length,\n        num_walks=num_walks,\n        workers=4",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "truth_file",
        "kind": 5,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "truth_file = './validations/doremus/valid_same_as.ttl'\ndef extract_entity_vectors(rdf_file, vector_dim=100, walk_length=30, num_walks=10):\n    rdf_graph = Graph()\n    rdf_graph.parse(rdf_file, format=\"turtle\")\n    rdf2vec_model = Node2Vec(\n        dimensions=vector_dim,\n        walk_length=walk_length,\n        num_walks=num_walks,\n        workers=4\n    )",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "sigmoid",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def sigmoid(value):\n    return 1 / (1 + np.exp(value))\ndef cosine_sim(v1=[], v2=[]):\n    output = 0.0\n    dot = np.dot(v1, v2)\n    output = sigmoid(dot)\n    if output <= 0.10  :\n        # print(output)\n        return True\n    return False",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "cosine_sim",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def cosine_sim(v1=[], v2=[]):\n    output = 0.0\n    dot = np.dot(v1, v2)\n    output = sigmoid(dot)\n    if output <= 0.10  :\n        # print(output)\n        return True\n    return False\ndef extract_entity_vectors_rdf(graph, index, embedding_dim=1000):\n    nx_graph = rdflib_to_networkx_multidigraph(graph)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "extract_entity_vectors_rdf",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def extract_entity_vectors_rdf(graph, index, embedding_dim=1000):\n    nx_graph = rdflib_to_networkx_multidigraph(graph)\n    node2vec = Node2Vec(nx_graph, dimensions=64, walk_length=30, num_walks=20, workers=4)\n    model = node2vec.fit(window=10, min_count=1, batch_words=4)  \n    return model # model.wv['subject']\ndef calculate_alignment_metrics(output_file, truth_file):\n    output_graph = Graph()\n    output_graph.parse(output_file, format=\"turtle\")\n    truth_graph = Graph()\n    truth_graph.parse(truth_file, format=\"turtle\")",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "calculate_alignment_metrics",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def calculate_alignment_metrics(output_file, truth_file):\n    output_graph = Graph()\n    output_graph.parse(output_file, format=\"turtle\")\n    truth_graph = Graph()\n    truth_graph.parse(truth_file, format=\"turtle\")\n    found_alignments = set(output_graph.subjects())\n    true_alignments = set(truth_graph.subjects())\n    intersection = len(found_alignments.intersection(true_alignments))\n    precision = intersection / len(found_alignments) if len(found_alignments) > 0 else 0.0\n    recall = intersection / len(true_alignments) if len(true_alignments) > 0 else 0.0",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "create_and_save_rdf_from_dict",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def create_and_save_rdf_from_dict(input_dict, output_file):\n    graph = Graph()\n    # owl = Namespace(\"http://www.w3.org/2002/07/owl#\")\n    for source, target in input_dict.items():\n        source_uri = URIRef(source)\n        target_uri = URIRef(target)\n        graph.add((source_uri, OWL.sameAs, target_uri))\n    graph.serialize(destination=output_file, format=\"turtle\")\ndef random_choice(value='', data=[], n = 500):\n    ds = DeepSimilarity(code='*')",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "random_choice",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def random_choice(value='', data=[], n = 500):\n    ds = DeepSimilarity(code='*')\n    score = 0.0\n    _object = ''\n    _data = random.choices(data, k=n)\n    values = [ ds.jaro_similarity(value1=value, value2=d)  for d in _data ]\n    score = max(values)\n    index = values.index(score)\n    _object = _data[index]\n    return score, _object",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "process_rdf_files",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def process_rdf_files(file1, file2):\n    graph1 = Graph()\n    graph1.parse(file1)\n    vectors1 = extract_entity_vectors_rdf(graph=graph1, index=1)\n    graph2 = Graph()\n    graph2.parse(file2)  \n    vectors2 = extract_entity_vectors_rdf(graph=graph2, index=2)\n    os1 = {}\n    _alignements = {}\n    _g1_length = len(graph1)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "output_file = './outputs/agrold/tmp_same_as.ttl'\ntruth_file = './validations/agrold/valid_same_as.ttl'\ndef sigmoid(value):\n    return 1 / (1 + np.exp(value))\ndef cosine_sim(v1=[], v2=[]):\n    output = 0.0\n    dot = np.dot(v1, v2)\n    output = sigmoid(dot)\n    if output <= 0.10  :\n        # print(output)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "truth_file",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "truth_file = './validations/agrold/valid_same_as.ttl'\ndef sigmoid(value):\n    return 1 / (1 + np.exp(value))\ndef cosine_sim(v1=[], v2=[]):\n    output = 0.0\n    dot = np.dot(v1, v2)\n    output = sigmoid(dot)\n    if output <= 0.10  :\n        # print(output)\n        return True",
        "detail": "test",
        "documentation": {}
    }
]